# Note, the development environment will only spin a min of 1 instance (Not HA Support)
# The production environment will spin a min of 2 instance (HA support)
# You can adjust the ASMIN, ASMAX, ASDES at the master.yaml file
# to meet your instances spin numbers.
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
    This template deploys an AutoScaling Launch Config and Group for WebServer

Parameters: 

  PMServerEnv:
    Description: "Server Environment name."
    ConstraintDescription: "Choose an Environment from the drop down"
    Type: "String"

  PMKeyName:
    Description: "Enter an existing EC2 KeyPair. Default is MyEC2Key"
    Type: "String"

  PMInstanceType: 
    Description: "Enter t2.micro or m1.small. Default is t2.micro."
    Type: "String"

  PMPublicSubnets:
    Description: "Subnets to launch instances into"
    Type: "List<AWS::EC2::Subnet::Id>"

  MyWordpressHostSG:
    Description: "Select the Security Group to use for the EC2 hosts"
    Type: "AWS::EC2::SecurityGroup::Id"

  PMWEBDOMAIN:
    Description: "A reference to the Webserver domain name"
    Type: "String"

  PMHostDomain:
    Description: "Enter a server host domain."
    Type: "String"

  PMWordpressVer:
    Description: "Enter an wordpress version."
    Type: "String"

  PMS3Backup:
    Description: "S3 Backup Bucket Name"
    Type: "String"

  PMAPPLoadBalancerUrl:
    Description: "A reference to the AppServer Load Balancer"
    Type: "String"

  PMWEBLoadBalancer:
    Description: "A reference to the Webserver Load Balancer"
    Type: "String"

  PMIAMS3CWInstanceProfile:
    Description: "A reference to the IamInstanceProfile"
    Type: "String"

  PMRegionAMI:
    Description: "A reference to the Region AMI"
    Type: "String"

  PMASMIN:
    Description: "A reference to the MinSize"
    Type: "String"

  PMASMAX:
    Description: "A reference to the MaxSize"
    Type: "String"

  PMASDES:
    Description: "A reference to the DesiredCapacity"
    Type: "String"

  PMPrivateKey:
    Description: "SSL Private Key domain."
    Type: "String"

  PMCertKey:
    Description: "SSL Cert Key domain."
    Type: "String"

  PMStaplingKey:
    Description: "SSL Stapling trusted key domain."
    Type: "String"


Resources:

  # Auto Scaling Launch Configuration
  LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      AssociatePublicIpAddress: "true"
      KeyName:
        Ref: "PMKeyName"
      ImageId:
        Ref: "PMRegionAMI"
      InstanceType:
        Ref: "PMInstanceType"
      IamInstanceProfile:
        Ref: "PMIAMS3CWInstanceProfile"
      SecurityGroups:
      - Ref: "MyWordpressHostSG"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Install Nginx Repo
          wget http://nginx.org/keys/nginx_signing.key
          apt-key add nginx_signing.key
          echo 'deb http://nginx.org/packages/debian/ jessie nginx' > /etc/apt/sources.list.d/nginx.list
          echo 'deb-src http://nginx.org/packages/debian/ jessie nginx' >> /etc/apt/sources.list.d/nginx.list

          apt-get update && apt-get upgrade -y
          apt-get install -y php5-fpm php5-curl php5-gd php5-mcrypt php5-mhash php5-mysql php5-xmlrpc php-gettext php5-cli php5-dev smarty3
          apt-get install -y nginx telnet git python-pip dnsutils default-jdk screen locales tcpdump openssl rsync curl
          # pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

          # Install AWS cfn-bootstrap utilities
          apt-get -y install python-setuptools
          easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

          # Pre-Install & Pre-setup
          export DEBIAN_FRONTEND=noninteractive
          # apt-get install -y xfsprogs dracut numactl
          # apt-get -q -y install mdadm --no-install-recommends
          # sudo touch /var/lib/cloud/instance/locale-check.skip
          echo 'LC_ALL="en_US.UTF-8"' >> /etc/default/locale
          echo '${PMHostDomain}' > /etc/hostname
          # Update hostname on the fly
          hostname ${PMHostDomain}

          count=$(aws s3 ls "${PMS3Backup}" | wc -l)
          if [ $count != 0 ]
          then 
          # File aready exist! (sync s3 backup to site-folder)
          mkdir -p /home/www/public_html/${PMWEBDOMAIN}
          aws s3 sync s3://${PMS3Backup}/ /home/www/public_html/${PMWEBDOMAIN}/
          chown -R www-data:www-data /home/www/public_html/${PMWEBDOMAIN}
          chmod -R +x /home/www/public_html/${PMWEBDOMAIN}
          # Setup Crontab
          crontab -l | { cat; echo '*/2 * * * * aws s3 sync --sse --no-follow-symlinks /home/www/public_html/${PMWEBDOMAIN}/ s3://${PMS3Backup}/ > /dev/null 2>&1'; } | crontab -
          crontab -l | { cat; echo '*/3 * * * * aws s3 sync --sse s3://${PMS3Backup}/ /home/www/public_html/${PMWEBDOMAIN}/ > /dev/null 2>&1'; } | crontab -
          /etc/init.d/cron restart
          else
          # File don't exist (download wordpress)
          mkdir -p /home/www/public_html
          cd /home/www/public_html/
          wget https://wordpress.org/wordpress-${PMWordpressVer}.tar.gz
          tar -xf wordpress-${PMWordpressVer}.tar.gz
          rm -rf wordpress-${PMWordpressVer}.tar.gz
          mv wordpress ${PMWEBDOMAIN}
          chown -R www-data:www-data /home/www/public_html/${PMWEBDOMAIN}
          chmod -R +x /home/www/public_html/${PMWEBDOMAIN}
          aws s3 sync /home/www/public_html/${PMWEBDOMAIN}/ s3://${PMS3Backup}/
          # Setup Crontab
          crontab -l | { cat; echo '*/2 * * * * aws s3 sync --sse --no-follow-symlinks /home/www/public_html/${PMWEBDOMAIN}/ s3://${PMS3Backup}/ > /dev/null 2>&1'; } | crontab -
          crontab -l | { cat; echo '*/3 * * * * aws s3 sync --sse s3://${PMS3Backup}/ /home/www/public_html/${PMWEBDOMAIN}/ > /dev/null 2>&1'; } | crontab -
          /etc/init.d/cron restart
          fi

          # Update php config
          sed -i 's/session.gc_maxlifetime = 1440/session.gc_maxlifetime = 3600/g' /etc/php5/fpm/php.ini
          sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g' /etc/php5/fpm/php.ini
          sed -i 's/;include_path = \".:\/usr\/share\/php\"/include_path = \".:\/usr\/share\/php:\/usr\/share\/php\/smarty3\"/g' /etc/php5/fpm/php.ini
          sed -i 's/;mbstring.language = Japanese/mbstring.language = Neutral/g' /etc/php5/fpm/php.ini
          sed -i 's/;mbstring.internal_encoding =/mbstring.internal_encoding = UTF-8/g' /etc/php5/fpm/php.ini
          sed -i 's/;mbstring.encoding_translation = Off/mbstring.encoding_translation = On/g' /etc/php5/fpm/php.ini
          sed -i 's/;mbstring.http_input =/mbstring.http_input = auto/g' /etc/php5/fpm/php.ini
          sed -i 's/;mbstring.http_output =/mbstring.http_output = UTF-8/g' /etc/php5/fpm/php.ini
          sed -i 's/;mbstring.detect_order = auto/mbstring.detect_order = auto/g' /etc/php5/fpm/php.ini
          sed -i 's/;mbstring.substitute_character = none/mbstring.substitute_character = none/g' /etc/php5/fpm/php.ini
          sed -i 's/;mbstring.func_overload = 0/mbstring.func_overload = 7/g' /etc/php5/fpm/php.ini

          ######################################################################
          # Create custom Nginx directory
          ######################################################################
          mkdir -p /etc/nginx/conf.d
          mkdir -p /etc/nginx/sites-enabled
          mkdir -p /etc/nginx/sites-available

          ######################################################################
          # Install SSL Certs
          ######################################################################
          aws s3 cp s3://${PMPrivateKey} /etc/ssl/private/
          aws s3 cp s3://${PMCertKey} /etc/ssl/certs/
          aws s3 cp s3://${PMStaplingKey} /etc/ssl/certs/

          ######################################################################
          # Configure Nginx.conf
          ######################################################################
          echo "user www-data;
          worker_processes auto;
          pid /var/run/nginx.pid;
       
          events {
          worker_connections 1024;
          multi_accept on;
          use epoll;
          }
       
          worker_rlimit_nofile 10000;

          http {

          ##
          # Basic Settings 
          ##
          sendfile on;
          tcp_nopush on;
          tcp_nodelay on;
          keepalive_timeout 65;
          types_hash_max_size 2048;
          server_tokens off;
         
          include /etc/nginx/mime.types;
          default_type application/octet-stream;
         
          # set client body size to 32M #
          client_max_body_size 32M;

          ##
          # Logging Settings
          ##
          access_log /var/log/nginx/access.log;
          error_log /var/log/nginx/error.log;
         
          ##
          # Gzip Settings
          ##
          gzip on;
          gzip_disable "msie6";
          gzip_static on;
          gzip_vary on;
          gzip_proxied any;
          gzip_comp_level 9;
          gzip_buffers 16 8k;
          gzip_http_version 1.1;
          gzip_types text/plain text/css text/csv application/json application/javascript application/x-javascript image/x-icon text/xml application/xml application/xml+rss text/javascript;
       
          ##
          # open_file_cache optimization
          ##
          open_file_cache max=200000 inactive=50s;
          open_file_cache_valid 60s;
          open_file_cache_min_uses 2;
          open_file_cache_errors on;
       
          ##
          # Virtual Host Configs
          ##
          include /etc/nginx/conf.d/*.conf;
          include /etc/nginx/sites-enabled/*;
          }" > /etc/nginx/nginx.conf

          ######################################################################
          # Configure proxy.conf
          ######################################################################
          echo "proxy_redirect		off;
          proxy_set_header	Host \$host;
          proxy_set_header	X-Real-IP \$remote_addr;
          proxy_set_header	X-Forwarded-For \$proxy_add_x_forwarded_for;
          client_body_buffer_size	256K;
          client_max_body_size	12m;
          proxy_connect_timeout	600;
          proxy_send_timeout	600;
          proxy_read_timeout	600;
          proxy_buffer_size	128k;
          proxy_buffers		4 256k;
          proxy_busy_buffers_size	256k;" > /etc/nginx/proxy.conf

          echo "server {
          server_name  ${PMWEBDOMAIN};
          rewrite ^ https://\$server_name\$request_uri? permanent;
          }

          server {
          server_name ${PMWEBDOMAIN};
          listen 443;
          add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
          ssl_stapling on;
          ssl_stapling_verify on;
          ssl_trusted_certificate /etc/ssl/certs/stapling.crytera.crt;
          resolver 8.8.8.8 8.8.4.4 valid=300s;
          resolver_timeout 5s;
          ssl on;
          ssl_session_timeout 10m;
          ssl_protocols TLSv1.2;
          ssl_prefer_server_ciphers on;
          ssl_ciphers "ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:RSA+3DES:!RC4:HIGH:!ADH:!AECDH:!MD5";
          ssl_certificate /etc/ssl/certs/crytera.com.nginx.crt;
          ssl_certificate_key /etc/ssl/private/crytera.com.key;
          ssl_session_cache shared:SSL:10m;
            
          root /home/www/public_html/${PMWEBDOMAIN}/;
          index index.php index.html index.htm;

          location / {
          try_files \$uri \$uri.html \$uri/ =404;
          include proxy.conf;
          }

          location ~* \.(jpg|jpeg|png|css|js|ico|gif|eot|ttf|woff|svg|otf|webm)\$ {
          access_log off;
          log_not_found off;
          expires 365d;
          add_header Cache-Control public;
          proxy_cache_valid any 1m;
          proxy_cache_valid 200 304 12h;
          proxy_cache_valid 302 301 12h;
          proxy_cache_key \$host\$uri#is_args\$args;
          if (\$request_filename ~* ^.*?\.(eot)|(ttf)|(woff)|(svg)|(otf)|(webm)\$){
          add_header Access-Control-Allow-Origin *;
          }
          }

          location ~ \\.php\$ {
          try_files \$uri =404;
          fastcgi_split_path_info ^(.+\\.php)(/.+)\$;
          fastcgi_pass unix:/var/run/php5-fpm.sock;
          fastcgi_index index.php;
          fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
          include fastcgi_params;
          }   

          location /nginx_status {
          stub_status on;
          access_log off;
          # only allow localhost access
          allow 127.0.0.1;
          deny all;
          }
          }" > /etc/nginx/sites-available/${PMWEBDOMAIN}

          ln -sf /etc/nginx/sites-available/${PMWEBDOMAIN} /etc/nginx/sites-enabled/

          /etc/init.d/php5-fpm restart
          # /etc/init.d/nginx restart

          /usr/local/bin/cfn-signal -e 0 -r 'server setup complete' "${WaitHandleWEB}"  > /tmp/userdata.log

  WaitHandleWEB:
    Type: "AWS::CloudFormation::WaitConditionHandle"

  WaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    Properties:
      Handle: !Ref "WaitHandleWEB"
      Timeout: '300'

  # Auto Scaling Group Basic Setup
  WebScalingGroup: 
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      MinSize: !Ref "PMASMIN"
      MaxSize: !Ref "PMASMAX"
      DesiredCapacity: !Ref "PMASDES"
      LaunchConfigurationName:
        Ref: "LaunchConfiguration"
      VPCZoneIdentifier:
        Ref: "PMPublicSubnets"
      LoadBalancerNames:
      - Ref: "PMWEBLoadBalancer"
      HealthCheckGracePeriod: "300"
      HealthCheckType: "ELB"
      Tags:
      - Key: "Name"
        Value: !Sub "${PMServerEnv}-WEBserver"
        PropagateAtLaunch: 'true'

  # Auto ScalingUp Policy - Basic Setup
  WebServerScaleUpPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName:
        Ref: "WebScalingGroup"
      Cooldown: '300'
      ScalingAdjustment: '1'

  # Auto ScalingDown Policy - Basic Setup
  WebServerScaleDownPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName:
        Ref: "WebScalingGroup"
      Cooldown: '300'
      ScalingAdjustment: '-1'


Outputs:

  WebScalingGroup: 
    Description: "Auto Scaling Group Reference ID"
    Value: !Ref "WebScalingGroup"

  WebServerScaleUpPolicy: 
    Description: "Auto Scaling Up Policy Reference ID"
    Value: !Ref "WebServerScaleUpPolicy"

  WebServerScaleDownPolicy: 
    Description: "Auto Scaling Down Policy Reference ID"
    Value: !Ref "WebServerScaleDownPolicy"


