# Note : The Cloudformation Security Group IP address is open by default (testing purpose).
# You should update Security Group Access with your own IP Address to ensure your instances security.
#
# Prerequisites
# Before you can start this process, you need the following:
# - Your AWS account must have one VPC available to be created in the selected region
# - Amazon EC2 key pair
# - Installed Domain in Route 53.
# - Installed Certificate (in your selected region & also in us-east-1) 
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
    This is a master template to create a Web Application Architecture.
    The following task will be built in this template.
    - Custom VPC with Private and Public Subnet spread across 2 Availability Zones.
    - Internet Gateway, with a default route on the public subnets.
    - NAT Gateways (In one Public AZ) and route to private subnets.

    Last Modified: 11th Dec 2017
    Author: Thinegan Ratnam <thinegan@thinegan.com>

###############################################################################################################

Parameters: 

  PMEnvVPC:
    Description: "Stack VPC Environment."
    Type: "String"

  PMOWNIP:
    Description: "Update this with your own office/home public ip address"
    Type: "String"

  PMKeyName:
    Description: "Enter an existing EC2 KeyPair."
    Type: "String" 

  PMTemplateURL:
    Description: "Enter an existing S3 Cloudformation Bucket."
    Type: "String"

  PMHostedZone:
    Description: "Enter an existing Hosted Zone."
    Type: "String"

  PMInstanceType: 
    Description: "Enter t2.micro or m1.small. Default is t2.micro."
    Type: "String"
    AllowedValues: 
      - "t2.micro"
      - "m1.small"

  PMDatabaseUsername:
    Description: "Enter DB username."
    Type: "String"

  PMDatabasePassword:
    Description: "Enter DB password."
    Type: "String"

  PMDatabaseEngine:
    Description: "Db Type."
    Type: "String"

  PMDatabaseInstanceClass:
    Description: "Db Instance type."
    Type: "String"

  PMDatabaseName:
    Description: "Db Name."
    Type: "String"

  PMDatabaseSize:
    Description: "Db Size."
    Type: "String"

###############################################################################################################
#
# For any additional region & Env, you can add by yourself below.
Mappings:
  EnvMap:

    dev:
      ASMIN: '2'
      ASMAX: '3'
      ASDES: '2'
      WEBDOMAIN: "dev.kasturicookies.com"
      CDNDOMAIN: "devel.kasturicookies.com"

    staging:
      ASMIN: '2'
      ASMAX: '3'
      ASDES: '2'
      WEBDOMAIN: "staging.kasturicookies.com"
      CDNDOMAIN: "static.kasturicookies.com"

    prod:
      ASMIN: '2'
      ASMAX: '5'
      ASDES: '2'
      WEBDOMAIN: "www.kasturicookies.com"
      CDNDOMAIN: "cdn.kasturicookies.com"

  RegionMap:
    # US,North Virginia
    us-east-1:
      PMKeyName: "MyKey-Virginia"
      # AMI Instance - Amazon Linux AMI 2016.09.1 (HVM), SSD Volume Type - ami-dc9339bf (Free tier eligible)
      AMI: "ami-c58c1dd3"
      # AStorage - The storage class to which you want the object to transition.
      AStorage: "GLACIER"
      # Update with your own cert ARN HERE!
      # Assuming you have already upload to AWS Certificate Manager
      CertARN: "arn:aws:acm:us-east-1:370888776060:certificate/eec1f4f2-2632-4d20-bd8a-fbfbcdb15920"

    # Singapore
    ap-southeast-1:
      PMKeyName: "MyEC2Key"
      AMI: "ami-fc5ae39f"
      AStorage: "STANDARD_IA"
      CertARN: "arn:aws:acm:ap-southeast-1:370888776060:certificate/b06aa290-bb09-4fee-9e09-864c4cc8cc98"

###############################################################################################################

####### Condition Setup #######
Conditions:
  UseProdEnv: !Equals [ !Ref "PMInstanceType", "prod" ]


Resources:

  MySecurityGroup:
    Type: "AWS::CloudFormation::Stack"
    # Condition: "UseProdEnv"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/wp-securitygroup.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMOWNIP: !Ref "PMOWNIP"
        PMServerEnv: !Ref "AWS::StackName"
        PMVPC:
          Fn::ImportValue: !Sub "${PMEnvVPC}-VPC"

  MyRDS:
    Type: "AWS::CloudFormation::Stack"
    Condition: "UseProdEnv"
    DependsOn:
    - "MySecurityGroup"
    Properties:
      TemplateURL: !Sub "${PMTemplateURL}/wp-rds.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        PMServerEnv: !Ref "AWS::StackName"
        DatabaseUser: !Ref "PMDatabaseUsername"
        DatabasePassword: !Ref "PMDatabasePassword"
        DatabaseName: !Ref "PMDatabaseName"
        DatabaseSize: !Ref "PMDatabaseSize"
        DatabaseEngine: !Ref "PMDatabaseEngine"
        DatabaseInstanceClass: !Ref "PMDatabaseInstanceClass"
        PMRDSSG: !GetAtt "MySecurityGroup.Outputs.RDSSG"
        PMPrivateSubnets:
          Fn::ImportValue: !Sub "${PMEnvVPC}-PrivateSubnets"

  # MyAPPELB:
  #   Type: "AWS::CloudFormation::Stack"
  #   Condition: "UseProdEnv"
  #   DependsOn:
  #   - "MyRDS"
  #   Properties:
  #     TemplateURL: !Sub "${PMTemplateURL}/wp-elb-appserver.yaml"
  #     TimeoutInMinutes: '5'
  #     Parameters:
  #       PMServerEnv: !Ref "AWS::StackName"
  #       PMAPPELBSG: !GetAtt "MySecurityGroup.Outputs.APPELBSG"
  #       PMS3Logging: !GetAtt "MyS3Bucket.Outputs.S3Logging"
  #       PMPrivateSubnets:
  #         Fn::ImportValue: !Sub "${PMEnvVPC}-PrivateSubnets"
  #       PMPublicSubnets:
  #         Fn::ImportValue: !Sub "${PMEnvVPC}-PublicSubnets"

#  MyAPPAutoScaling:
#    Type: "AWS::CloudFormation::Stack"
#    DependsOn:
#    - "MyAPPELB"
#    Properties:
#      TemplateURL: !Sub "${PMTemplateURL}/wp-autoscaling-appserver.yaml"
#      TimeoutInMinutes: '5'
#      Parameters:
#        PMServerEnv: !Ref "AWS::StackName"
#        PMKeyName: !Ref "PMKeyName"
#        PMInstanceType: !Ref "PMInstanceType"
#        PMRegionAMI: !FindInMap ["RegionMap", !Ref "AWS::Region", "AMI"]
#        PMAPPHostSG : !GetAtt "MySecurityGroup.Outputs.APPHostSG"
#        PMAPPLoadBalancer: !GetAtt "MyAPPELB.Outputs.APPLoadBalancer"
#        PMS3Backup: !GetAtt "MyS3Bucket.Outputs.S3Backup"
#        PMIAMS3CWInstanceProfile: !GetAtt "MyIAMRole.Outputs.IAMS3CWInstanceProfile"
#        PMPrivateSubnets: !GetAtt "MyVPC.Outputs.PrivateSubnets"
#        PMPublicSubnets: !GetAtt "MyVPC.Outputs.PublicSubnets"
#        PMASMIN: !FindInMap ["EnvMap", !Ref "AWS::StackName", "ASMIN"]
#        PMASMAX: !FindInMap ["EnvMap", !Ref "AWS::StackName", "ASMAX"]
#        PMASDES: !FindInMap ["EnvMap", !Ref "AWS::StackName", "ASDES"]
#        PMWEBDOMAIN: !FindInMap ["EnvMap", !Ref "AWS::StackName", "WEBDOMAIN"]

#  MyWEBELB:
#    Type: "AWS::CloudFormation::Stack"
#    DependsOn:
#    - "MyAPPAutoScaling"
#    Properties:
#      TemplateURL: !Sub "${PMTemplateURL}/wp-elb-webserver.yaml"
#      TimeoutInMinutes: '5'
#      Parameters:
#        PMServerEnv: !Ref "AWS::StackName"
#        PMDomain1CertARN: !FindInMap ["RegionMap", !Ref "AWS::Region", "CertARN"]
#        PMWEBELBSG: !GetAtt "MySecurityGroup.Outputs.WEBELBSG"
#        PMPublicSubnets: !GetAtt "MyVPC.Outputs.PublicSubnets"
#        PMS3Logging: !GetAtt "MyS3Bucket.Outputs.S3Logging"
#
#  MyWEBAutoScaling:
#    Type: "AWS::CloudFormation::Stack"
#    DependsOn:
#    - "MyWEBELB"
#    Properties:
#      TemplateURL: !Sub "${PMTemplateURL}/wp-autoscaling-webserver.yaml"
#      TimeoutInMinutes: '5'
#      Parameters:
#        PMServerEnv: !Ref "AWS::StackName"
#        PMKeyName: !Ref "PMKeyName"
#        PMInstanceType: !Ref "PMInstanceType"
#        PMRegionAMI: !FindInMap ["RegionMap", !Ref "AWS::Region", "AMI"]
#        PMProxyHostSG: !GetAtt "MySecurityGroup.Outputs.ProxyHostSG"
#        PMWEBLoadBalancer: !GetAtt "MyWEBELB.Outputs.WEBLoadBalancer"
#        PMIAMS3CWInstanceProfile: !GetAtt "MyIAMRole.Outputs.IAMS3CWInstanceProfile"
#        PMPublicSubnets: !GetAtt "MyVPC.Outputs.PublicSubnets"
#        PMS3Backup: !GetAtt "MyS3Bucket.Outputs.S3Backup"
#        PMAPPLoadBalancerUrl: !GetAtt "MyAPPELB.Outputs.APPLoadBalancerUrl"
#        PMASMIN: !FindInMap ["EnvMap", !Ref "AWS::StackName", "ASMIN"]
#        PMASMAX: !FindInMap ["EnvMap", !Ref "AWS::StackName", "ASMAX"]
#        PMASDES: !FindInMap ["EnvMap", !Ref "AWS::StackName", "ASDES"]
#        PMWEBDOMAIN: !FindInMap ["EnvMap", !Ref "AWS::StackName", "WEBDOMAIN"]
#
#  MyCloudWatch:
#    Type: "AWS::CloudFormation::Stack"
#    DependsOn:
#    - "MyWEBAutoScaling"
#    Properties:
#      TemplateURL: !Sub "${PMTemplateURL}/wp-cloudwatch.yaml"
#      TimeoutInMinutes: '5'
#      Parameters:
#        PMWebScalingGroup: !GetAtt "MyWEBAutoScaling.Outputs.WebScalingGroup"
#        PMWebServerScaleUpPolicy: !GetAtt "MyWEBAutoScaling.Outputs.WebServerScaleUpPolicy"
#        PMWebServerScaleDownPolicy: !GetAtt "MyWEBAutoScaling.Outputs.WebServerScaleDownPolicy"
#        PMAppScalingGroup: !GetAtt "MyAPPAutoScaling.Outputs.AppScalingGroup"
#        PMAPPServerScaleUpPolicy: !GetAtt "MyAPPAutoScaling.Outputs.APPServerScaleUpPolicy"
#        PMAPPServerScaleDownPolicy: !GetAtt "MyAPPAutoScaling.Outputs.APPServerScaleDownPolicy"
#
#  MyDNS:
#    Type: "AWS::CloudFormation::Stack"
#    DependsOn:
#    - "MyCloudWatch"
#    Properties:
#      TemplateURL: !Sub "${PMTemplateURL}/wp-route53.yaml"
#      TimeoutInMinutes: '5'
#      Parameters:
#        PMWEBLBDNSName: !GetAtt "MyWEBELB.Outputs.WEBLBDNSName"
#        PMWEBLBHostedZoneId: !GetAtt "MyWEBELB.Outputs.WEBLBHostedZoneId"
#        PMWEBDOMAIN: !FindInMap ["EnvMap", !Ref "AWS::StackName", "WEBDOMAIN"]
#        PMHostedZone: !Ref "PMHostedZone"
#
#
#Outputs:
#
#  Webserver:
#    Description: "Web Server Site"
#    Value:
#      Fn::Join:
#        - ''
#        - - "https://"
#          - !FindInMap ["EnvMap", !Ref "AWS::StackName", "WEBDOMAIN"]
#          - "/"
#
#  RDS:
#    Description: "RDS Server EndPoint"
#    Value:
#      Fn::Join:
#        - ''
#        - - "Endpoint: "
#          - !GetAtt "MyRDS.Outputs.RdsDbURL"
#          - ":"
#          - !GetAtt "MyRDS.Outputs.RdsDbPORT"
#
